"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COIN_MAP: function() { return /* binding */ COIN_MAP; },\n/* harmony export */   connectToWebSocket: function() { return /* binding */ connectToWebSocket; },\n/* harmony export */   fetchInitialData: function() { return /* binding */ fetchInitialData; }\n/* harmony export */ });\n// utils/coinUtils.ts\n// COIN_LIST ve COIN_LIST_HISTORY eşlemesi\nconst COIN_MAP = {\n    ethereum: \"ethereum\",\n    usdt: \"usd-coin\",\n    avalanche: \"avalanche\",\n    bitcoin: \"bitcoin\",\n    tron: \"tron\",\n    chainlink: \"chainlink\",\n    shib: \"shiba-inu\",\n    solana: \"solana\",\n    decentraland: \"decentraland\",\n    sand: \"the-sandbox\"\n};\nconst API_BASE_URL = \"https://api.coincap.io/v2/assets\";\n// Yardımcı fonksiyonlar\nasync function fetchCoinData(coin) {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/\").concat(coin));\n        const data = await response.json();\n        if (response.ok) {\n            return {\n                price: Number(data.data.priceUsd).toFixed(9),\n                symbol: data.data.symbol,\n                marketValue: (Number(data.data.marketCapUsd) / 1e9).toFixed(2),\n                change24h: Number(data.data.changePercent24Hr).toFixed(2)\n            };\n        } else {\n            console.error(\"Failed to fetch data for \".concat(coin, \":\"), data);\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error fetching data for \".concat(coin, \":\"), error);\n        return null;\n    }\n}\nasync function fetchCoinHistory(coin) {\n    try {\n        const endTime = Date.now();\n        const startTime = endTime - 10 * 60 * 60 * 1000; // Son 10 saatlik veriyi al\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/\").concat(coin, \"/history?interval=h1&start=\").concat(startTime, \"&end=\").concat(endTime));\n        const data = await response.json();\n        if (response.ok) {\n            return data.data.map((item)=>Number(item.priceUsd));\n        } else {\n            console.error(\"Failed to fetch history for \".concat(coin, \":\"), data);\n            return [];\n        }\n    } catch (error) {\n        console.error(\"Error fetching history for \".concat(coin, \":\"), error);\n        return [];\n    }\n}\nasync function fetchInitialData() {\n    const initialData = {};\n    // İlk API çağrısı için COIN_LIST'teki coin'leri kullan\n    const coinDataPromises = Object.keys(COIN_MAP).map(async (coin)=>{\n        const coinData = await fetchCoinData(coin);\n        if (coinData) {\n            initialData[coin.toLowerCase()] = coinData;\n        }\n    });\n    await Promise.all(coinDataPromises);\n    // İkinci API çağrısı için COIN_LIST_HISTORY'deki ID'leri kullan\n    const historyPromises = Object.values(COIN_MAP).map(async (coin, index)=>{\n        const history = await fetchCoinHistory(coin);\n        const key = Object.keys(COIN_MAP)[index].toLowerCase();\n        if (key && initialData[key]) {\n            initialData[key].history = history;\n        }\n    });\n    await Promise.all(historyPromises);\n    return initialData;\n}\n// WebSocket bağlantısı oluşturma fonksiyonu\nconst connectToWebSocket = (onMessage)=>{\n    const pricesWs = new WebSocket(\"wss://ws.coincap.io/prices?assets=\".concat(Object.keys(COIN_MAP).join(\",\")));\n    pricesWs.onmessage = function(msg) {\n        const data = JSON.parse(msg.data);\n        onMessage(data);\n    };\n    pricesWs.onclose = function() {\n        console.log(\"WebSocket connection closed\");\n    };\n    return ()=>{\n        pricesWs.close();\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});